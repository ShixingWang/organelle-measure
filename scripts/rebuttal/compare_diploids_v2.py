# Shankar thinks we should use the images directly from the original experiments.
# So data and plots generated by this script are not used.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
from skimage import io,util,segmentation,measure,filters
from nd2reader import ND2Reader
from organelle_measure.yeaz import yeaz_preprocesses,yeaz_label
from organelle_measure.tools import skeletonize_zbyz,neighbor_mean,find_complete_rings


# Segment cells, only need to do 6-color cells
for path in Path("images/raw/2024-02-16_rebuttal1color").glob("all_camera*.nd2"):
	with ND2Reader(str(path)) as nd2:
		nd2.bundle_axes = 'yx'
		nd2.iter_axes = 't'
		img = nd2[0]
	for prep in yeaz_preprocesses:
		img = prep(img)
	segmented = yeaz_label(img, min_dist=5)
	segmented = segmentation.clear_border(segmented)
	properties = measure.regionprops(segmented)
	for prop in properties:
		if prop.area < 50:
			segmented[segmented==prop.label] = 0
	segmented = measure.label(segmented)
	output = np.zeros((512,512),dtype=int)
	shape0,shape1 = segmented.shape
	output[:shape0,:shape1] = segmented

	io.imsave(
		f"images/cell/2024-02-16_rebuttal1color/{path.stem}.tif",
		util.img_as_uint(output)
	)


# Preprocess

# peroxisome
path = Path(f"images/raw/2024-02-16_rebuttal1color/all_unmixed-blue_diploid6color_field-4.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes   = "c"
	image = nd2[0]
gauss = filters.gaussian(image,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_peroxisome_diploids6color_field-4.tif",
	util.img_as_uint(gauss)
)

# vacuole
path = Path(f"images/raw/2024-02-16_rebuttal1color/all_unmixed-blue_diploid6color_field-4.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes   = "c"
	image = nd2[1]
gauss = filters.gaussian(image,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_vacuole_diploids6color_field-4.tif",
	util.img_as_uint(gauss)
)

# ER
path = Path(f"images/raw/2024-02-16_rebuttal1color/all_spectra-green_diploid6color_field-4.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = 'zyx'
	nd2.iter_axes = "t"
	image = nd2[0]
gauss = filters.gaussian(image,sigma=0.3,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_ER_diploids6color_field-4.tif",
	util.img_as_uint(gauss)
)

# golgi
path = Path(f"images/raw/2024-02-16_rebuttal1color/all_spectra-yellow_diploid6color_field-4.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes = 't'
	image = nd2[0]
gauss = filters.gaussian(image,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_golgi_diploids6color_field-4.tif",
	util.img_as_uint(gauss)
)

# mitochondria
path_cell = Path(f"images/cell/2024-02-16_rebuttal1color/all_camera-after_diploid6color_field-4.tif")
cell = io.imread(str(path_cell))
path = Path(f"images/raw/2024-02-16_rebuttal1color/all_unmixed-red_diploid6color_field-4.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes = 'c'
	image = nd2[0]
bkgd = neighbor_mean(image,cell)
clear = image - bkgd
clear[clear<0] = 0
gauss = filters.gaussian(clear,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_mitochondria_diploids6color_field-4.tif",
	util.img_as_uint(gauss)
)

path_cell = Path(f"images/cell/2024-02-16_rebuttal1color/mt_camera-after_diploid1color_field-1.tif")
cell = io.imread(str(path_cell))
path = Path(f"images/raw/2024-02-16_rebuttal1color/mt_unmix-red_diploid1color_field-1.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes = 'c'
	image = nd2[0]
bkgd = neighbor_mean(image,cell)
clear = image - bkgd
clear[clear<0] = 0
gauss = filters.gaussian(clear,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_mitochondria_diploids1color_field-1.tif",
	util.img_as_uint(gauss)
)


# LD
path_cell = Path(f"images/cell/2024-02-16_rebuttal1color/all_camera-after_diploid6color_field-4.tif")
cell = io.imread(str(path_cell))
path = Path(f"images/raw/2024-02-16_rebuttal1color/all_unmixed-red_diploid6color_field-4.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes = 'c'
	image = nd2[1]
bkgd = neighbor_mean(image,cell)
clear = image - bkgd
clear[clear<0] = 0
gauss = filters.gaussian(clear,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_LD_diploids6color_field-4.tif",
	util.img_as_uint(gauss)
)

path_cell = Path(f"images/cell/2024-02-16_rebuttal1color/ld_camera-after_diploid1color_field-1.tif")
cell = io.imread(str(path_cell))
path = Path(f"images/raw/2024-02-16_rebuttal1color/ld_unmixed-red_diploid1color_field-1.nd2")
with ND2Reader(str(path)) as nd2:
	nd2.bundle_axes = "zyx"
	nd2.iter_axes = 'c'
	image = nd2[0]
bkgd = neighbor_mean(image,cell)
clear = image - bkgd
clear[clear<0] = 0
gauss = filters.gaussian(clear,sigma=0.75,preserve_range=True).astype(int)
io.imsave(
	f"images/preprocessed/rebuttal_diploid_v2/preprocessed_LD_diploids1color_field-1.tif",
	util.img_as_uint(gauss)
)


# Postprocess, after Ilastik

# peroxisome, golgi, lipid droplet (globular organelles)
for organelle in ["peroxisome","golgi","LD"]:
	for path in Path("images/preprocessed/rebuttal_diploid_v2/").glob(f"Probabilities*{organelle}*.tiff"):
		print(path) # glob() method behaves weirdly with f-string!
		img = io.imread(str(path))
		img = (img>0.5)
		path_ref = Path(f"images/preprocessed/rebuttal_diploid_v2/{path.stem.partition('_')[2]}.tif")
		ref = io.imread(str(path_ref))
		output = segmentation.watershed(-ref,mask=img)
		io.imsave(
			f"images/labelled/rebuttal_diploid_v2/{path_ref.name.partition('_')[2]}",
			util.img_as_uint(output)
		)	

# mitochondria
for path in Path(f"images/preprocessed/rebuttal_diploid_v2/").glob("Probabilities*mitochondria*.tiff"):
	print(path)
	img = io.imread(str(path))
	img = (img>0.5)
	output = measure.label(img)
	io.imsave(
		f"images/labelled/rebuttal_diploid_v2/{path.stem.partition('_')[2].partition('_')[2]}.tif",
		util.img_as_uint(output)
	)

# ER
for path in Path(f"images/preprocessed/rebuttal_diploid_v2/").glob("Probabilities*ER*.tiff"):
	img = io.imread(str(path))
	img = (img>0.5)
	ske = skeletonize_zbyz(img)
	io.imsave(
		f"images/labelled/rebuttal_diploid_v2/{path.stem.partition('_')[2].partition('_')[2]}.tif",
		util.img_as_uint(ske)
	)

# # vacuole
# path = Path(f"images/preprocessed/{FOLDER}/Probabilities_preprocessed_vacuole_diploids1color.tiff")
# img = io.imread(str(path))
# img = (img>0.5)
# path_cell = Path(f"images/cell/{FOLDER}/camera-BF-after_EY2795triColor-EY2796WT_check-2.tif")
# cell = io.imread(path_cell)
# ske = skeletonize_zbyz(img)
# core = find_complete_rings(ske)
# output = np.zeros_like(core,dtype=int)
# for z in range(output.shape[0]):
# 	sample = core[z]
# 	candidates = np.unique(sample[cell>0])
# 	for color in candidates:
# 		if len(np.unique(cell[sample==color]))==1:
# 			output[z,sample==color] = color
# io.imsave(
# 	f"images/labelled/{FOLDER}/vacuole_diploids1color.tif",
# 	util.img_as_uint(output)
# )


# Measure
organelles = [
	"peroxisome",
	# "vacuole",
	"ER",
	"golgi",
	"mitochondria",
	"LD"
]
imgs_cell = {
	"peroxisome"  : "px_camera-before_diploid1color_field-1.tif",
	# "vacuole"     : "vo_camera-after_diploid1color_field-1.tif",
	"ER"          : "er_camera-after_diploid1color_field-1.tif",
	"golgi"       : "gl_camera-after_diploid1color_field-1.tif",
	"mitochondria": "mt_camera-after_diploid1color_field-1.tif",
	"LD"          : "ld_camera-after_diploid1color_field-1.tif"
}
# single-color
for organelle in organelles:
	path_cell      = Path(f"images/cell/2024-02-16_rebuttal1color/{imgs_cell[organelle]}")
	path_organelle = Path(f"images/labelled/rebuttal_diploid_v2/{organelle}_diploids1color_field-1.tif")
	
	img_cell      = io.imread(str(path_cell))
	img_organelle = io.imread(str(path_organelle))

	results = []
	measured = {"organelle": organelle}
	for cell in measure.regionprops(img_cell):
		measured["cell-idx"] = cell.label
		measured["cell-area"] = cell.area

		min_row, min_col, max_row, max_col = cell.bbox
		img_cell_crop = cell.image
		img_orga_crop = img_organelle[:,min_row:max_row,min_col:max_col]
		for z in range(img_orga_crop.shape[0]):
			img_orga_crop[z] = img_orga_crop[z] * img_cell_crop
		if not organelle == "vacuole":
			measured_orga = measure.regionprops_table(
				img_orga_crop,
				properties=('label','area','bbox_area','bbox')
			)
		else:
			vacuole_area = 0
			vacuole_bbox_area = 0
			bbox0,bbox1,bbox2,bbox3,bbox4,bbox5 = 0,0,0,0,0,0
			for z in range(img_orga_crop.shape[0]):
				vacuole = measure.regionprops_table(
                    img_orga_crop[z],
                    properties=('label','area','bbox_area','bbox')
                )
				if len(vacuole["area"]) == 0:
					continue
				if (maxblob:=max(vacuole["area"])) > vacuole_area:
					vacuole_area = maxblob
					idxblob = np.argmax(vacuole["area"])
					vacuole_bbox_area = vacuole["bbox_area"][idxblob]
					bbox0,bbox3 = z,z
					bbox1,bbox2,bbox4,bbox5 = [vacuole[f"bbox-{i}"][idxblob] for i in range(4)]
			if vacuole_area==0:
				continue
			measured_orga = {
				'label': [0],
                'area':  [vacuole_area],
                "bbox_area": [vacuole_bbox_area],
                "bbox-0": [bbox0],
                "bbox-1": [bbox1],
                "bbox-2": [bbox2],
                "bbox-3": [bbox3],
                "bbox-4": [bbox4],
                "bbox-5": [bbox5],
			}
		measured = measured | measured_orga
		results.append(pd.DataFrame(measured))
	result = pd.concat(results,ignore_index=True)
	result.to_csv(f"data/rebuttal_diploid_v2/color-1_{organelle}.csv",index=False)
# six-color
for organelle in organelles:
	path_cell      = Path(f"images/cell/2024-02-16_rebuttal1color/all_camera-after_diploid6color_field-4.tif")
	path_organelle = Path(f"images/labelled/rebuttal_diploid_v2/{organelle}_diploids6color_field-4.tif")
	
	img_cell      = io.imread(str(path_cell))
	img_organelle = io.imread(str(path_organelle))

	results = []
	measured = {"organelle": organelle}
	for cell in measure.regionprops(img_cell):
		measured["cell-idx"] = cell.label
		measured["cell-area"] = cell.area

		min_row, min_col, max_row, max_col = cell.bbox
		img_cell_crop = cell.image
		img_orga_crop = img_organelle[:,min_row:max_row,min_col:max_col]
		for z in range(img_orga_crop.shape[0]):
			img_orga_crop[z] = img_orga_crop[z] * img_cell_crop
		if not organelle == "vacuole":
			measured_orga = measure.regionprops_table(
				img_orga_crop,
				properties=('label','area','bbox_area','bbox')
			)
		else:
			vacuole_area = 0
			vacuole_bbox_area = 0
			bbox0,bbox1,bbox2,bbox3,bbox4,bbox5 = 0,0,0,0,0,0
			for z in range(img_orga_crop.shape[0]):
				vacuole = measure.regionprops_table(
                    img_orga_crop[z],
                    properties=('label','area','bbox_area','bbox')
                )
				if len(vacuole["area"]) == 0:
					continue
				if (maxblob:=max(vacuole["area"])) > vacuole_area:
					vacuole_area = maxblob
					idxblob = np.argmax(vacuole["area"])
					vacuole_bbox_area = vacuole["bbox_area"][idxblob]
					bbox0,bbox3 = z,z
					bbox1,bbox2,bbox4,bbox5 = [vacuole[f"bbox-{i}"][idxblob] for i in range(4)]
			if vacuole_area==0:
				continue
			measured_orga = {
				'label': [0],
                'area':  [vacuole_area],
                "bbox_area": [vacuole_bbox_area],
                "bbox-0": [bbox0],
                "bbox-1": [bbox1],
                "bbox-2": [bbox2],
                "bbox-3": [bbox3],
                "bbox-4": [bbox4],
                "bbox-5": [bbox5],
			}
		measured = measured | measured_orga
		results.append(pd.DataFrame(measured))
	result = pd.concat(results,ignore_index=True)
	result.to_csv(f"data/rebuttal_diploid_v2/color-6_{organelle}.csv",index=False)


# Comparison, NOT EXECUTED YET
px_x,px_y,px_z = 0.41,0.41,0.20
organelles = [
    "peroxisome",
    # "vacuole",
    "ER",
    "golgi",
    "mitochondria",
    "LD"
]

# 1-color cells
dfs_read = []
for path in Path("data/rebuttal_diploid_v2").glob("color-1*.csv"):
	dfs_read.append(pd.read_csv(str(path)))
df_1color = pd.concat(dfs_read,ignore_index=True)
df_1color["volume-um3"] = (px_x*px_y*px_z)*df_1color["area"]
df_1color.loc[df_1color["organelle"].eq("vacuole"),"volume-um3"] = (
	(px_x * px_y * df_1color.loc[df_1color["organelle"].eq("vacuole"),"area"])
	*2
	*np.sqrt(
		px_x * px_y * df_1color.loc[df_1color["organelle"].eq("vacuole"),"area"]
		/np.pi
	)
)
df_1color["cell-volume-um3"] = (
	(px_x * px_y * df_1color["cell-area"])
	*2
	*np.sqrt(
		px_x * px_y * df_1color["cell-area"]
		/np.pi
	)
)

bycell_1color = df_1color[["organelle","cell-idx","cell-volume-um3"]].groupby(["organelle","cell-idx"]).mean()
bycell_1color["mean-um3"]  = df_1color[["organelle","cell-idx","volume-um3"]].groupby(["organelle","cell-idx"]).mean()
bycell_1color["total-um3"] = df_1color[["organelle","cell-idx","volume-um3"]].groupby(["organelle","cell-idx"]).sum()
bycell_1color["count"]     = df_1color[["organelle","cell-idx","volume-um3"]].groupby(["organelle","cell-idx"]).count()
bycell_1color["volume-fraction"] = bycell_1color["total-um3"] / bycell_1color["cell-volume-um3"]
bycell_1color.reset_index(inplace=True)

# 6-color cells
dfs_read = []
for path in Path("data/rebuttal_diploid_v2").glob("color-6*.csv"):
	dfs_read.append(pd.read_csv(str(path)))
df_6color = pd.concat(dfs_read,ignore_index=True)
df_6color["volume-um3"] = (px_x*px_y*px_z)*df_6color["area"]
df_6color.loc[df_6color["organelle"].eq("vacuole"),"volume-um3"] = (
	(px_x * px_y * df_6color.loc[df_6color["organelle"].eq("vacuole"),"area"])
	*2
	*np.sqrt(
		px_x * px_y * df_6color.loc[df_6color["organelle"].eq("vacuole"),"area"]
		/np.pi
	)
)
df_6color["cell-volume-um3"] = (
	(px_x * px_y * df_6color["cell-area"])
	*2
	*np.sqrt(
		px_x * px_y * df_6color["cell-area"]
		/np.pi
	)
)

bycell_6color = df_6color[["organelle","cell-idx","cell-volume-um3"]].groupby(["organelle","cell-idx"]).mean()
bycell_6color["mean-um3"]  = df_6color[["organelle","cell-idx","volume-um3"]].groupby(["organelle","cell-idx"]).mean()
bycell_6color["total-um3"] = df_6color[["organelle","cell-idx","volume-um3"]].groupby(["organelle","cell-idx"]).sum()
bycell_6color["count"]     = df_6color[["organelle","cell-idx","volume-um3"]].groupby(["organelle","cell-idx"]).count()
bycell_6color["volume-fraction"] = bycell_6color["total-um3"] / bycell_6color["cell-volume-um3"]
bycell_6color.reset_index(inplace=True)

# Plot
plt.rcParams["figure.autolayout"]=True
for organelle in organelles:
	for property in ["mean-um3","total-um3","volume-fraction","count"]:
		plt.figure(figsize=(2,4))
		for d,dataset in enumerate([bycell_6color,bycell_1color]):
			plt.bar(
				[d], height= dataset.loc[dataset["organelle"].eq(organelle),property].mean(),
					   yerr=(
						     dataset.loc[dataset["organelle"].eq(organelle),property].std()
							# /np.sqrt(len(dataset.loc[dataset["organelle"].eq(organelle),property]))
							)
			)
		plt.xticks(
			ticks=np.arange(2),
			labels=["6-label diploids","1-color diploids"]
		)
		name = property.replace('um3','volume').replace("count","number").replace('-',' ').title()
		y_label = r"Volume ($\mu$m$^3$)" if "um3" in property else name
		plt.ylabel(y_label)
		plt.title(f"{organelle}\n{name}")
		plt.savefig(
			f"plots/rebuttal_diploid_v2/{organelle}_{name}.png",
			dpi=300
		)

# Extra Request: mean signal intensity and mean SNR
		